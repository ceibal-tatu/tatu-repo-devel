#!/bin/bash

set -x

unset CDPATH

GIT_SERVER=github.com
GIT_BASE=/ceibal-tatu/
ARCH="i386 amd64"

if [ -f /etc/taturepo.conf ]; then
    . /etc/taturepo.conf
fi

if [ -f ~/.taturepo ]; then
    . ~/.taturepo
fi

LOCAL=0
CLEAN=0
while getopts ":lca:n:v:" opt; do
    case $opt in
        a)
            ARCH=$OPTARG
            ;;
        n)
            NAME=$OPTARG
            ;;
        v)
            VERSION=$OPTARG
            ;;
        l)
            LOCAL=1
            ;;
        c)
            CLEAN=1
            ;;
         \?)
           echo "Invalid option: -$OPTARG" >&2
           ;;
    esac
done


if [[ $LOCAL -eq 0  && ($NAME == "" || $VERSION == "") ]]; then
    cat >&2 <<USAGE
Usage: ${0} [-c] [-a ARCH] [-l | -n <package name> -v <version>]
    -a (optional) Architecture. Defaults to 'i386 amd64'.
    -c (optional) Clean source folder if build for first architecture fails.
GIVE  
    -l Build using the current folder.
OR
    -n Name of the package. A git repository with that name will be cloned to 
       get the package sources.
    -v Version of the package (or 'latest' to use latest on master branch).
USAGE
    exit 1
fi

ARCH_LIST=(${ARCH})

if [ "${#ARCH_LIST[@]}" -lt 1 ]; then
    echo "Must provide at least one architecture." >&2
    exit 1
fi

if [[ $LOCAL -eq 0 ]]; then

    # Create temporary folder for git clone
    SOURCE_DIR=$(mktemp --tmpdir -d "build-${NAME}_${VERSION}-XXXXXX")
    cd "${SOURCE_DIR}"

    GIT_REPO="git://${GIT_SERVER}${GIT_BASE}${NAME}.git"
    echo "Clonando ${GIT_REPO}..."
    # Get git repository. Use git-buildpackage in case the repo was created with git-buildpackage.
    gbp clone "${GIT_REPO}";
    cd "${NAME}"
    
    # Checkout tag & verify signature.
    if [[ $VERSION != "latest" ]]; then
        echo "Obteniendo tag y verificando firma."
        git checkout "tags/${VERSION}"
        git tag -v "${VERSION}"
        if [ $? -ne 0 ]; then
            echo "FIRMA INVALIDA. NO SE CONSTRUIRA EL PAQUETE." >&2 && exit 1;
        fi
    fi
fi

ARCH_INDEP=1
DPKG_BUILD_OPTS=""
if [ "$(grep "^\\s*Architecture:\\s*all\\s*\$" debian/control)" == "" ]; then
    ARCH_INDEP=0
	DPKG_BUILD_OPTS="--binary-arch"
fi

echo "Construyendo paquete..."
if git branch|grep "pristine-tar"; then
    # Git-buildpackage like structure, use git-buildpackage instead of pdebuild
    
    # Build base architecture.
    sudo GIT_PBUILDER_AUTOCONF=no ARCH="${ARCH_LIST[0]}" gbp buildpackage ${GBP_BUILD_OPTIONS}
    if [[ $? -ne 0 ]]; then
        "Fallo la construccion del paquete para la arquitecture '${ARCH_LIST[0]}'.">&2
        if [[ $CLEAN -eq 1 ]]; then        
            sudo rm -rf "${SOURCE_DIR}"
        else
            echo "Fuentes en '${SOURCE_DIR}'.">&2
        fi
        exit 1
    fi

    # Build other architectures.
    if [ "${ARCH_INDEP}" -eq 0 ]; then
        for arch in "${ARCH_LIST[@]:1}"; do
            sudo GIT_PBUILDER_AUTOCONF=no ARCH="${arch}" gbp buildpackage ${GBP_BUILD_OPTIONS}
        done
    fi
else
    if [ "$(grep "3.0 (quilt)" debian/source/format)" != "" ]; then
        # Quilt package, get upstream source
        UPSTREAM_VERSION=$(sed -e "s/\(.*\)-.*/\1/" <<< "${VERSION}")
        if [ "$UPSTREAM_VERSION" == "" ]; then 
            "No se puede determinar la version upstream para ${VERSION}."
            exit 1
        fi
        tatu-upstream-get -n "${NAME}" -v "${VERSION}"
    fi

    # Build base architecture.
    sudo ARCH="${ARCH_LIST[0]}" pdebuild ${PDEBUILD_OPTIONS}

    # Build other architectures.
    if [ "${ARCH_INDEP}" -eq 0 ]; then
        for arch in "${ARCH_LIST[@]:1}"; do
            sudo ARCH="${arch}" pdebuild ${PDEBUILD_OPTIONS} -- ${DPKG_BUILD_OPTS}
        done
    fi
fi

# Delete source folder.
sudo rm -rf "${SOURCE_DIR}"
