#!/bin/bash

#
# Copies a pdebuild output to the repository staging area, and adds the package to the repository.
# 
REPO_SERVER=tatu
REPO_USER=root
REPO_BASEDIR=/srv/reprepro/ubuntu/
REPO_CODENAME=tatu
ARCH="i386 amd64"
VERSION=
NAME=

if [ -e ~/.taturepo ]; then
    . ~/.taturepo
fi

while getopts ":a:n:v:" opt; do
    case $opt in
        a)
            ARCH=$OPTARG
            ;;
        n)
            NAME=$OPTARG
            ;;
        v)
            VERSION=$OPTARG
            ;;
         \?)
           echo "Invalid option: -$OPTARG" >&2
           ;;
    esac
done

if [ "$NAME" = "" -o "$VERSION" = "" ]; then
    echo "Usage: $0 [-a ARCH] -n <package name> -v <version>" >&2
    exit 1
fi

ARCH_LIST=(${ARCH})

if [ "${#ARCH_LIST[@]}" -lt 1 ]; then
    echo "Must provide at least one architecture." >&2
    exit 1
fi

ssh -A ${BUILD_USER}@${BUILD_SERVER} 'bash -sh' <<EOF
unset CDPATH

# Create temporary folder for git clone
SOURCE_DIR=\$(mktemp --tmpdir -d "build-${NAME}_${VERSION}-XXXXXX")
echo "\${SOURCE_DIR}"
cd "\${SOURCE_DIR}"

# Get git repository
git clone git://${GIT_SERVER}${GIT_BASE}${NAME}.git;
cd "${NAME}"

# Verify tag signature.
git tag -v "${VERSION}"
if [ $? -ne 0 ]; then
	echo "FIRMA INVALIDA. NO SE CONSTRUIRA EL PAQUETE." >&2 && exit 1;
fi

ARCH_INDEP=1
DPKG_BUILD_OPTS=""
if [ "\$(grep "^\\s*Architecture:\\s*all\\s*\$" debian/control)" == "" ]; then
    ARCH_INDEP=0
	DPKG_BUILD_OPTS="--binary-arch"
fi

# Build base architecture.
sudo ARCH="${ARCH_LIST[0]}" pdebuild

# Build other architectures.
if [ "\${ARCH_INDEP}" -eq 0 ]; then
    for arch in "${ARCH_LIST[@]:1}"; do
	    sudo ARCH="\${arch}" pdebuild -- \${DPKG_BUILD_OPTS}
    done
fi

# Delete source folder.
rm -rf "\${SOURCE_DIR}"
EOF

[ $? -ne 0 ] && echo 'Git build failed.' >&2 && exit 1;

# Copy built files to repository server for publishing.
for arch in "${ARCH_LIST[@]}"; do
	scp ${BUILD_USER}@${BUILD_SERVER}:${BUILD_BASEDIR}/${BUILD_CODENAME}-${arch}/result/${NAME}_${VERSION}[_.]* ${REPO_USER}@${REPO_SERVER}:staging-${arch}/
done

# Copy tatu-repo & tatu-repo-update to HTTP server root folder, and link current published version.
if [ "${NAME}" = "tatu-repo" -o "${NAME}" = "tatu-repo-update" ]; then
	ssh ${REPO_USER}@${REPO_SERVER} 'bash -sh'<<EOF
cp staging-${ARCH_LIST[0]}/${NAME}_${VERSION}_all.deb ${REPO_WEBROOT};
ln -f -s ${REPO_WEBROOT}/${NAME}_${VERSION}_all.deb ${REPO_WEBROOT}/${NAME}.deb
EOF
fi

[ $? -ne 0 ] && echo 'Copy to server staging area failed.' >&2 && exit 1;
for arch in "${ARCH_LIST[@]}"; do
	ssh ${REPO_USER}@${REPO_SERVER} "reprepro --basedir ${REPO_BASEDIR} include ${REPO_CODENAME} staging-${arch}/${NAME}_${VERSION}_${arch}.changes"
done
